#include "ATestClass.h"
#include <format>
using namespace std;

int main(int argc, char *argv[]) {
  ATestClass aClass;
  char buf[100];
  sprintf(buf, "%g", numeric_limits<float>::quiet_NaN());
  cout << buf << endl;
  sprintf(buf, "%g", numeric_limits<float>::infinity());
  cout << buf << endl;
  sprintf(buf, "%g",- numeric_limits<float>::quiet_NaN());
  cout << buf << endl;
  sprintf(buf, "%g", -numeric_limits<float>::infinity());
  cout << buf << endl;
  sprintf(buf, "%g",- 0.0);
  cout << buf << endl;
  cout << format("{:b}", 42) << endl;
  cout << format("{: >b}", 42) << endl;
  cout << format("{: ^b}", 42) << endl;
  cout << format("{:#b}", 42) << endl;
  cout << format("{:#10B}", 42) << endl;
  cout << format("{}, {}!", "Hello", "World") << endl;
  cout << format("{} {} {:g}", 1, "2", 3.0) << endl;
  cout << format("{}", 100000.) << endl;
  cout << format("{}", 1e5) << endl;
  cout << format("{}", 1e5f - numeric_limits<float>::epsilon() - 1e-7f) << endl;
  cout << format("{}", 1e5f - numeric_limits<float>::epsilon() - 1e-6f) << endl;
  cout << format("{}", 1e5f - numeric_limits<float>::epsilon() - 1e-5f) << endl;
  cout << format("{}", 1e5 - numeric_limits<double>::epsilon() - 1e-7) << endl;
  cout << format("{}", 1e5 - numeric_limits<double>::epsilon() - 1e-6) << endl;
  cout << format("{}", 1e5 - numeric_limits<double>::epsilon() - 1e-5) << endl;
  cout << format("{}", 1e5f - numeric_limits<float>::epsilon() - 1e-7f) << endl;
  cout << format("{}", 1e5f - numeric_limits<float>::epsilon() - 1e-6f) << endl;
  cout << format("{}", 1e5f - numeric_limits<float>::epsilon() - 1e-5f) << endl;
  cout << format("{}", 1e5 - numeric_limits<double>::epsilon() - 1e-7) << endl;
  cout << format("{}", 1e5 - numeric_limits<double>::epsilon() - 1e-6) << endl;
  cout << format("{}", 1e5 - numeric_limits<double>::epsilon() - 1e-5) << endl;
  cout << format("{:20}", 42) << endl;
  cout << format("{: <20}", 42) << endl;
  cout << format("{: ^20}", 42) << endl;
  cout << format("{: >+20x}", 42) << endl;
  cout << format("{: <+20x}", 42) << endl;
  cout << format("{: ^+20x}", 42) << endl;
  cout << format("{: >20x}", -42) << endl;
  cout << format("{: <20x}", -42) << endl;
  cout << format("{: ^20x}", -42) << endl;
  cout << format("{:*>20}", 42) << endl;
  cout << format("{:.<20}", 42) << endl;
  cout << format("{:0^20}", 42) << endl;
  cout << format("{:20}", 42.0) << endl;
  cout << format("{: <20}", 42.0) << endl;
  cout << format("{: ^20}", 42.0) << endl;
  cout << format("{:20g}", 42.0) << endl;
  cout << format("{: <20g}", 42.0) << endl;
  cout << format("{: ^20g}", 42.0) << endl;
  cout << format("{:20e}", 42.0) << endl;
  cout << format("{: <20e}", 42.0) << endl;
  cout << format("{: ^20e}", 42.0) << endl;
  cout << format("{: >20a}", 42.0) << endl;
  cout << format("{: <20a}", 42.0) << endl;
  cout << format("{: ^20a}", 42.0) << endl;
  cout << format("{: >20f}", 42.0) << endl;
  cout << format("{: <20f}", 42.0) << endl;
  cout << format("{: ^20f}", 42.0) << endl;
  cout << format("{: ^20.2f}", 42.0) << endl;
  cout << format("{:`^20.{}f}", 42.0, 2) << endl;
  cout << format("{:`^20.{}a}", 42.0, 2) << endl;
  cout << format("{:`^20.{}g}", 42.0, 2) << endl;
  cout << format("{:`^20.{}e}", 42.0, 2) << endl;
  cout << format("{0:`^20.{1}e}", 42.0, 2) << endl;
  cout << format("{0:`>10s}", "str") << endl;
  cout << format("{0:`<10s}", "str") << endl;
  cout << format("{0:`^10s}", "str") << endl;
  cout << format("{0:`>10.{1}s}", "strstrstrstr", 10) << endl;
  cout << format("{0:`<10.9}", "strstrstrstr") << endl;
  cout << format("{0:`^10.10s}", "strstrstrstr") << endl;
  return 0;
}
